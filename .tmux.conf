# Source Tmuxline config
# source-file ~/src/teh-awesome-tmux-setup/.tmuxline-snapshot
source-file ~/src/teh-awesome-tmux-setup/.gruvbox-theme

# Enable Ctrl-Left Ctrl-Right to navigate words
set-window-option -g xterm-keys on

# Don't rename windows automatically
set-option -g allow-rename off

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# C-b is not acceptable -- Vim uses it
set-option -g prefix  C-a
bind-key 'C-a' send-prefix
set-option -g prefix2 ^@ # C-` haha

# Start numbering at 1
set -g base-index      1
set -g pane-base-index 1

# Allows for faster key repetition
set -sg escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set  -g visual-activity  on

set  -g mouse            on

# Vi copypaste mode
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v   send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y   send-keys -X copy-selection
# unbind-key -T copy-mode-vi v

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -n End send-key C-e
bind -n Home send-key C-a
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

set -g default-terminal screen-256color
# set-option -ga terminal-overrides ",xterm-256color:Tc"

# Dev window
bind-key m \
	run-shell "tmux rename-window $(basename #{pane_current_path})" \;\
  send-keys -l vim \;\
  send-keys Enter \;\
  split-window -h -c '#{pane_current_path}' \;\
  send-keys -l 'npm run develop' \;\
  send-keys Enter \;\
  split-window -v -c '#{pane_current_path}' \;\
  send-keys -l gst \;\
  send-keys Enter \;\
  select-pane -L \;\
  resize-pane -t 1 -x 124

bind-key l \
  set-window-option synchronize-panes \;\
  send-keys Escape \;\
  send-keys -l :L \;\
  send-keys Enter \;\
  set-window-option synchronize-panes \;\
  run "~/src/teh-awesome-tmux-setup/switch-background-mode-in-vimrc.sh light"
bind-key d \
  set-window-option synchronize-panes \;\
  send-keys Escape \;\
  send-keys -l :D \;\
  send-keys Enter \;\
  set-window-option synchronize-panes \;\
  run "~/src/teh-awesome-tmux-setup/switch-background-mode-in-vimrc.sh dark"

bind-key S   setw           synchronize-panes
bind-key C   command-prompt -p "Name of new window: " "new-window -n '%%'"        # When we create a window set cmd name
bind-key N   run-shell      "tmux rename-window $(basename #{pane_current_path})" # rename window to curr dir name
bind-key a   last-window                                                          # quickly toggle windows

# Set window split shortcuts, ensure window is same path as current split
bind-key v split-window -h -c '#{pane_current_path}'
bind-key b split-window -c    '#{pane_current_path}'
bind-key c new-window   -c    '#{pane_current_path}'

set-option -g history-limit 10000

# auto window rename
set-window-option -g automatic-rename

set -g pane-border-status top
set -g pane-border-format ' #(pwd="#{pane_current_path}"; echo üìÇ ${pwd####*/}) ‚åÅ #{pane_current_command} '

# status bar
if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 2\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set-option -g status-utf8 on'

# fix pane_current_path on new window and splits
if-shell "#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)" 'unbind c; bind c new-window -c "#{pane_current_path}"'
if-shell "#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)" "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
if-shell "#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)" 'unbind v; bind v split-window -h -c "#{pane_current_path}"'
if-shell "#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)" 'unbind %; bind % split-window -h -c "#{pane_current_path}"'

# Dont exit copy mode after yanking
set -g @yank_action 'copy-pipe'
# Needed this for weird base64 bug with tmux yank
set -s set-clipboard off

set -g @scroll-speed-num-lines-per-scroll 1

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
